# backend/main.py
import os
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
from dotenv import load_dotenv

load_dotenv()

from gpt_summarizer import parse_user_text_to_structure, generate_place_descriptions
from google_maps import geocode_location, generate_route_url
from schemas import POI, Location

app = FastAPI(title="TripArchitect API")

# CORS - geliÅŸtirme sÄ±rasÄ±nda * kullanÄ±mÄ± kolay; prod'da frontend origin'ini belirt.
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
    allow_credentials=True
)

class TripRequest(BaseModel):
    text: str

@app.get("/")
def read_root():
    return {"message": "TripArchitect API Ã§alÄ±ÅŸÄ±yor ğŸš€"}

@app.post("/plan_trip")
async def plan_trip(request: TripRequest):
    """
    Workflow:
    1) KullanÄ±cÄ±nÄ±n serbest metnini GPT'ye ver -> yapÄ±landÄ±rÄ±lmÄ±ÅŸ JSON (days, start,end,stops, budget)
    2) stops listesindeki mekanlarÄ± geocode et (koordinatlar)
    3) Her mekan iÃ§in kÄ±sa aÃ§Ä±klama Ã¼ret (2-4 cÃ¼mle) â€” GPT
    4) route_url oluÅŸtur ve JSON dÃ¶ndÃ¼r
    """
    try:
        user_text = request.text.strip()
        if not user_text:
            raise HTTPException(status_code=400, detail="Metin boÅŸ olamaz.")

        # 1) Parse user text -> struct
        struct = parse_user_text_to_structure(user_text)

        days = struct.get("days")
        start = struct.get("start_location")
        end = struct.get("end_location")
        budget = struct.get("budget")
        stops_by_day = struct.get("stops", [])  # Ã¶rn: [ ["A","B"], ["C","D"] ]

        # EÄŸer stops_by_day boÅŸsa, hata ver veya fallback mekan Ã¼ret (model sorunsuz yapmalÄ±)
        if not stops_by_day:
            raise HTTPException(status_code=400, detail="Rota iÃ§in yeterli durak Ã§Ä±kartÄ±lamadÄ±. LÃ¼tfen isteÄŸi biraz daha ayrÄ±ntÄ±lÄ± verin.")

        # 2) DÃ¼z bir mekan listesi (sÄ±ralÄ±) ve unique list
        flat_stops = []
        for day in stops_by_day:
            for s in day:
                if s not in flat_stops:
                    flat_stops.append(s)

        # 3) KoordinatlarÄ± al (baÅŸarÄ±sÄ±zsa hata tut)
        coords = []
        pois: List[POI] = []
        failed = []
        for name in flat_stops:
            try:
                lat, lng = geocode_location(name)
                coords.append((lat, lng))
                pois.append(POI(
                    name=name,
                    location=Location(lat=lat, lng=lng),
                    visit_duration=None
                ))
            except Exception as e:
                failed.append({"name": name, "error": str(e)})

        if not coords:
            raise HTTPException(status_code=404, detail=f"Hicbir mekan iÃ§in koordinat bulunamadÄ±. Hata Ã¶rnekleri: {failed[:3]}")

        # 4) Her POI iÃ§in kÄ±sa aÃ§Ä±klamalar (2-4 cÃ¼mle)
        place_names = [p.name for p in pois]
        descriptions_map = generate_place_descriptions(place_names)

        # Update POIs with descriptions
        for p in pois:
            if p.name in descriptions_map:
                p.description = descriptions_map[p.name]
            else:
                p.description = f"{p.name} hakkÄ±nda bilgi bulunamadÄ±."

        # 5) Harita URL (Google Embed)
        route_url = generate_route_url(coords)

        # 6) Ã‡Ä±ktÄ± dÃ¼zeni
        out = {
            "plan": struct.get("notes") or "",   # modelin 'plan' ya da 'notes' alanÄ± varsa oradan al
            "days": days,
            "start_location": start,
            "end_location": end,
            "budget": budget,
            "stops_by_day": stops_by_day,
            "pois": [p.dict() for p in pois],
            "map_url": route_url
        }

        return out

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Sunucu hatasÄ±: {e}")


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)